// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YFS.Repo.Data;

#nullable disable

namespace YFS.Repo.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YFS.Core.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AccountId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("AccountIsEnabled")
                        .HasColumnType("integer");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("Bank_GLMFO")
                        .HasColumnType("integer");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<int>("Favorites")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("IBAN")
                        .HasMaxLength(40)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountGroupId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("Bank_GLMFO");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValueSql("0.0");

                    b.Property<DateTime>("LastUpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountsBalance");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountGroup", b =>
                {
                    b.Property<int>("AccountGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountGroupId"));

                    b.Property<string>("AccountGroupNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("AccountGroupNameRu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("AccountGroupNameUa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("GroupOrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountGroupId");

                    b.HasIndex("UserId", "AccountGroupNameEn")
                        .IsUnique();

                    b.HasIndex("UserId", "AccountGroupNameRu")
                        .IsUnique();

                    b.HasIndex("UserId", "AccountGroupNameUa")
                        .IsUnique();

                    b.ToTable("AccountGroups");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountMonthlyBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ClosingMonthBalance")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("MonthCredit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("MonthDebit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("MonthNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("OpeningMonthBalance")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("StartDateOfMonth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("YearNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountsMonthlyBalance");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountTypeId"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("TypeOrderBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountTypeTranslation", b =>
                {
                    b.Property<int>("AccountTypeTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountTypeTranslationId"));

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.HasKey("AccountTypeTranslationId");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("AccountTypeTranslations");
                });

            modelBuilder.Entity("YFS.Core.Models.ApiToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TokenType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApiTokens");
                });

            modelBuilder.Entity("YFS.Core.Models.Bank", b =>
                {
                    b.Property<int>("GLMFO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GLMFO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GLMFO"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ADRESS");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("D_CLOSE");

                    b.Property<string>("CodeEDRPOU")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("KOD_EDRPOU");

                    b.Property<DateTime?>("DateStatus")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("D_STAN");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("FULLNAME");

                    b.Property<DateTime>("GrantLicenseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DT_GRAND_LIC");

                    b.Property<string>("GroupSpecial")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("GR_SP");

                    b.Property<DateTime?>("GroupSpecialDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("D_GR_SP");

                    b.Property<string>("IDNBU")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("IDNBU");

                    b.Property<int>("KU")
                        .HasColumnType("integer")
                        .HasColumnName("KU");

                    b.Property<DateTime?>("LicenseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DT_LIC");

                    b.Property<int>("LicenseNumber")
                        .HasColumnType("integer")
                        .HasColumnName("NUM_LIC");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("integer")
                        .HasColumnName("PR_LIC");

                    b.Property<string>("LicenseStatusDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("N_PR_LIC");

                    b.Property<string>("NKB")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NKB");

                    b.Property<string>("NOBL")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("N_OBL");

                    b.Property<string>("NOBLUR")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("N_OBL_UR");

                    b.Property<string>("NP")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NP");

                    b.Property<string>("NameEnglish")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NAME_E");

                    b.Property<int>("OBLUR")
                        .HasColumnType("integer")
                        .HasColumnName("OBL_UR");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("D_OPEN");

                    b.Property<string>("PostalIndex")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("P_IND");

                    b.Property<string>("ShortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SHORTNAME");

                    b.Property<string>("ShortNameEnglish")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SHORTNAME_EN");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("KSTAN");

                    b.Property<string>("StatusName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("N_STAN");

                    b.Property<string>("TNP")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TNP");

                    b.Property<string>("Telephone")
                        .HasColumnType("text")
                        .HasColumnName("TELEFON");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("TYP");

                    b.HasKey("GLMFO");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            GLMFO = 351005,
                            Address = "вулиця Андріївська, 2/12",
                            CodeEDRPOU = "09807750",
                            FullName = "АКЦІОНЕРНЕ ТОВАРИСТВО \"УКРСИББАНК\"",
                            GrantLicenseDate = new DateTime(2011, 10, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupSpecial = "SV",
                            GroupSpecialDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IDNBU = "351005",
                            KU = 26,
                            LicenseDate = new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            LicenseNumber = 75,
                            LicenseStatus = 1,
                            LicenseStatusDescription = "чинна банківська ліцензія",
                            NKB = "136",
                            NOBL = "м.Київ",
                            NOBLUR = "м.Київ",
                            NP = "Київ",
                            NameEnglish = "JOINT STOCK COMPANY \"UKRSIBBANK\"",
                            OBLUR = 26,
                            OpenDate = new DateTime(1991, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostalIndex = "04070",
                            ShortName = "АТ \"УКРСИББАНК\"",
                            ShortNameEnglish = "JSС \"UKRSIBBANK\"",
                            Status = 1,
                            StatusName = "Нормальний",
                            TNP = "м.",
                            Type = 0
                        },
                        new
                        {
                            GLMFO = 351254,
                            Address = "вул. Гончара Олеся, буд. 76/2",
                            CodeEDRPOU = "09620081",
                            FullName = "АКЦІОНЕРНЕ ТОВАРИСТВО \"СКАЙ БАНК\"",
                            GrantLicenseDate = new DateTime(2018, 6, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupSpecial = "B",
                            IDNBU = "351254",
                            KU = 26,
                            LicenseDate = new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            LicenseNumber = 32,
                            LicenseStatus = 1,
                            LicenseStatusDescription = "чинна банківська ліцензія",
                            NKB = "128",
                            NOBL = "м.Київ",
                            NOBLUR = "м.Київ",
                            NP = "Київ",
                            NameEnglish = "JOINT STOCK COMPANY \"SKY BANK\"",
                            OBLUR = 26,
                            OpenDate = new DateTime(1991, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostalIndex = "01054",
                            ShortName = "АТ \"СКАЙ БАНК\"",
                            ShortNameEnglish = "JSC \"SKY BANK\"",
                            Status = 1,
                            StatusName = "Нормальний",
                            TNP = "м.",
                            Type = 0
                        });
                });

            modelBuilder.Entity("YFS.Core.Models.BankSyncHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BankSyncHistories");
                });

            modelBuilder.Entity("YFS.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CategoryId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name_ENG")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_RU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_UA")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("RootId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            Name_ENG = "Account Balance adjustment",
                            Name_RU = "Корректировка баланса счета",
                            Name_UA = "Корегування балансу рахунка",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = -1,
                            Name_ENG = "Money Transfer",
                            Name_RU = "Перевод",
                            Name_UA = "Переказ",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 1,
                            Name_ENG = "Wages",
                            Name_RU = "Халтура",
                            Name_UA = "Халтура",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 2,
                            Name_ENG = "Salary",
                            Name_RU = "Зарплата",
                            Name_UA = "Зарплата",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 3,
                            Name_ENG = "Vacation",
                            Name_RU = "Отдых",
                            Name_UA = "Відпочинок",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 4,
                            Name_ENG = "Loans",
                            Name_RU = "Долги",
                            Name_UA = "Борги",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 5,
                            Name_ENG = "Food",
                            Name_RU = "Продукти питания",
                            Name_UA = "Продукти харчування",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 6,
                            Name_ENG = "Healthcare",
                            Name_RU = "Медицинские расходы",
                            Name_UA = "Медичні витрати",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 8,
                            Name_ENG = "Education",
                            Name_RU = "Образование",
                            Name_UA = "Освіта",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 9,
                            Name_ENG = "Other Income",
                            Name_RU = "Другие доходы",
                            Name_UA = "Інші прибутки",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 10,
                            Name_ENG = "Communal payments",
                            Name_RU = "Коммунальные платежи",
                            Name_UA = "Комунальні платежі",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 11,
                            Name_ENG = "Clothing",
                            Name_RU = "Одежда",
                            Name_UA = "Одяг",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 12,
                            Name_ENG = "Personal Care",
                            Name_RU = "Личная гигиена",
                            Name_UA = "Особиста гігієна",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 13,
                            Name_ENG = "Household",
                            Name_RU = "Хозяйственные расходы",
                            Name_UA = "Побутові видатки",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 14,
                            Name_ENG = "Improvements",
                            Name_RU = "Улучшения",
                            Name_UA = "Покращення",
                            Note = "",
                            RootId = 13
                        },
                        new
                        {
                            Id = 15,
                            Name_ENG = "Furnishings",
                            Name_RU = "Мебель",
                            Name_UA = "Меблі",
                            Note = "",
                            RootId = 13
                        },
                        new
                        {
                            Id = 16,
                            Name_ENG = "Electronics",
                            Name_RU = "Електроника",
                            Name_UA = "Електроніка",
                            Note = "",
                            RootId = 13
                        });
                });

            modelBuilder.Entity("YFS.Core.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_en")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_ru")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_ua")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("YFS.Core.Models.MerchantCategoryCode", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("Mccs");
                });

            modelBuilder.Entity("YFS.Core.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CashbackAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CurrencyAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("MCC")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("OperationAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("OperationCurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("TransferOperationId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeOperation")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("YFS.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YFS.Core.Models.Account", b =>
                {
                    b.HasOne("YFS.Core.Models.AccountGroup", null)
                        .WithMany("Accounts")
                        .HasForeignKey("AccountGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("Bank_GLMFO")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YFS.Core.Models.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("Bank");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountBalance", b =>
                {
                    b.HasOne("YFS.Core.Models.Account", null)
                        .WithOne("AccountBalance")
                        .HasForeignKey("YFS.Core.Models.AccountBalance", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YFS.Core.Models.AccountGroup", b =>
                {
                    b.HasOne("YFS.Core.Models.User", "User")
                        .WithMany("AccountsGroup")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountMonthlyBalance", b =>
                {
                    b.HasOne("YFS.Core.Models.Account", null)
                        .WithMany("AccountsMonthlyBalance")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YFS.Core.Models.AccountTypeTranslation", b =>
                {
                    b.HasOne("YFS.Core.Models.AccountType", "AccountType")
                        .WithMany("Translations")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("YFS.Core.Models.ApiToken", b =>
                {
                    b.HasOne("YFS.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YFS.Core.Models.Operation", b =>
                {
                    b.HasOne("YFS.Core.Models.Account", "Account")
                        .WithMany("Operations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("YFS.Core.Models.Account", b =>
                {
                    b.Navigation("AccountBalance")
                        .IsRequired();

                    b.Navigation("AccountsMonthlyBalance");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountGroup", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("YFS.Core.Models.Bank", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.Currency", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.User", b =>
                {
                    b.Navigation("AccountsGroup");
                });
#pragma warning restore 612, 618
        }
    }
}
