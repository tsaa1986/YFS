// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YFS.Repo.Data;

#nullable disable

namespace YFS.Repo.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YFS.Core.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AccountId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("AccountIsEnabled")
                        .HasColumnType("integer");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("Bank_GLMFO")
                        .HasColumnType("integer");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<int>("Favorites")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("IBAN")
                        .HasMaxLength(40)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountGroupId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("Bank_GLMFO");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValueSql("0.0");

                    b.Property<DateTime>("LastUpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountsBalance");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountGroup", b =>
                {
                    b.Property<int>("AccountGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountGroupId"));

                    b.Property<int>("GroupOrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("AccountGroups");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountGroupTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("AccountGroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("AccountGroupId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("AccountGroupTranslation");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountMonthlyBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ClosingMonthBalance")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("MonthCredit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("MonthDebit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("MonthNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("OpeningMonthBalance")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("StartDateOfMonth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("YearNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountsMonthlyBalance");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountSyncSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("AdditionalSettings")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FromSyncDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSuccessSyncDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AccountSyncSettings");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountTypeId"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("TypeOrderBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountTypeTranslation", b =>
                {
                    b.Property<int>("AccountTypeTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountTypeTranslationId"));

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.HasKey("AccountTypeTranslationId");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("AccountTypeTranslations");
                });

            modelBuilder.Entity("YFS.Core.Models.ApiToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TokenType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApiTokens");
                });

            modelBuilder.Entity("YFS.Core.Models.Bank", b =>
                {
                    b.Property<int>("GLMFO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GLMFO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GLMFO"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ADRESS");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("D_CLOSE");

                    b.Property<string>("CodeEDRPOU")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("KOD_EDRPOU");

                    b.Property<DateTime?>("DateStatus")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("D_STAN");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("FULLNAME");

                    b.Property<DateTime>("GrantLicenseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DT_GRAND_LIC");

                    b.Property<string>("GroupSpecial")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("GR_SP");

                    b.Property<DateTime?>("GroupSpecialDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("D_GR_SP");

                    b.Property<string>("IDNBU")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("IDNBU");

                    b.Property<int>("KU")
                        .HasColumnType("integer")
                        .HasColumnName("KU");

                    b.Property<DateTime?>("LicenseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DT_LIC");

                    b.Property<int>("LicenseNumber")
                        .HasColumnType("integer")
                        .HasColumnName("NUM_LIC");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("integer")
                        .HasColumnName("PR_LIC");

                    b.Property<string>("LicenseStatusDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("N_PR_LIC");

                    b.Property<string>("NKB")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NKB");

                    b.Property<string>("NOBL")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("N_OBL");

                    b.Property<string>("NOBLUR")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("N_OBL_UR");

                    b.Property<string>("NP")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NP");

                    b.Property<string>("NameEnglish")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NAME_E");

                    b.Property<int>("OBLUR")
                        .HasColumnType("integer")
                        .HasColumnName("OBL_UR");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("D_OPEN");

                    b.Property<string>("PostalIndex")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("P_IND");

                    b.Property<string>("ShortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SHORTNAME");

                    b.Property<string>("ShortNameEnglish")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SHORTNAME_EN");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("KSTAN");

                    b.Property<string>("StatusName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("N_STAN");

                    b.Property<string>("TNP")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TNP");

                    b.Property<string>("Telephone")
                        .HasColumnType("text")
                        .HasColumnName("TELEFON");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("TYP");

                    b.HasKey("GLMFO");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            GLMFO = 351005,
                            Address = "вулиця Андріївська, 2/12",
                            CodeEDRPOU = "09807750",
                            FullName = "АКЦІОНЕРНЕ ТОВАРИСТВО \"УКРСИББАНК\"",
                            GrantLicenseDate = new DateTime(2011, 10, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupSpecial = "SV",
                            GroupSpecialDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IDNBU = "351005",
                            KU = 26,
                            LicenseDate = new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            LicenseNumber = 75,
                            LicenseStatus = 1,
                            LicenseStatusDescription = "чинна банківська ліцензія",
                            NKB = "136",
                            NOBL = "м.Київ",
                            NOBLUR = "м.Київ",
                            NP = "Київ",
                            NameEnglish = "JOINT STOCK COMPANY \"UKRSIBBANK\"",
                            OBLUR = 26,
                            OpenDate = new DateTime(1991, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostalIndex = "04070",
                            ShortName = "АТ \"УКРСИББАНК\"",
                            ShortNameEnglish = "JSС \"UKRSIBBANK\"",
                            Status = 1,
                            StatusName = "Нормальний",
                            TNP = "м.",
                            Type = 0
                        },
                        new
                        {
                            GLMFO = 300465,
                            Address = "вул. Госпітальна, 12г",
                            CodeEDRPOU = "00032129",
                            FullName = "акціонерне товариство \"Державний ощадний банк України\"",
                            GrantLicenseDate = new DateTime(2011, 10, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupSpecial = "SV",
                            GroupSpecialDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IDNBU = "300465",
                            KU = 26,
                            LicenseDate = new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            LicenseNumber = 148,
                            LicenseStatus = 1,
                            LicenseStatusDescription = "чинна банківська ліцензія",
                            NKB = "006",
                            NOBL = "м.Київ",
                            NOBLUR = "м.Київ",
                            NP = "Київ",
                            NameEnglish = "Joint Stock Company \"State Savings Bank of Ukraine\"",
                            OBLUR = 26,
                            OpenDate = new DateTime(1991, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostalIndex = "01023",
                            ShortName = "АТ \"Ощадбанк\"",
                            ShortNameEnglish = "JSC \"Oschadbank\"",
                            Status = 1,
                            StatusName = "Нормальний",
                            TNP = "м.",
                            Type = 0
                        },
                        new
                        {
                            GLMFO = 300528,
                            Address = "вул. Жилянська, 43",
                            CodeEDRPOU = "21685166",
                            FullName = "АКЦІОНЕРНЕ ТОВАРИСТВО \"ОТП БАНК\"",
                            GrantLicenseDate = new DateTime(2011, 10, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupSpecial = "SV",
                            GroupSpecialDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IDNBU = "300528",
                            KU = 26,
                            LicenseDate = new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            LicenseNumber = 191,
                            LicenseStatus = 1,
                            LicenseStatusDescription = "чинна банківська ліцензія",
                            NKB = "296",
                            NOBL = "м.Київ",
                            NOBLUR = "м.Київ",
                            NP = "Київ",
                            NameEnglish = "JOINT-STOCK COMPANY OTP BANK",
                            OBLUR = 26,
                            OpenDate = new DateTime(1998, 3, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostalIndex = "01033",
                            ShortName = "АТ \"ОТП БАНК\"",
                            ShortNameEnglish = "OTP BANK JSC",
                            Status = 1,
                            StatusName = "Нормальний",
                            TNP = "м.",
                            Type = 0
                        },
                        new
                        {
                            GLMFO = 300614,
                            Address = "Район: Шевченківський, Місто: Київ, Вулиця: вул. Євгена Чикаленка, Будинок: 42/4",
                            CodeEDRPOU = "14361575",
                            FullName = "АКЦІОНЕРНЕ ТОВАРИСТВО \"КРЕДІ АГРІКОЛЬ БАНК\"",
                            GrantLicenseDate = new DateTime(2011, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupSpecial = "SV",
                            GroupSpecialDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IDNBU = "300614",
                            KU = 26,
                            LicenseDate = new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            LicenseNumber = 99,
                            LicenseStatus = 1,
                            LicenseStatusDescription = "чинна банківська ліцензія",
                            NKB = "171",
                            NOBL = "м.Київ",
                            NOBLUR = "м.Київ",
                            NameEnglish = "JOINT-STOCK COMPANY \"CREDIT AGRICOLE BANK\"",
                            OBLUR = 26,
                            OpenDate = new DateTime(1993, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostalIndex = "01004",
                            ShortName = "АТ \"КРЕДІ АГРІКОЛЬ БАНК\"",
                            ShortNameEnglish = "JSC \"CREDIT AGRICOLE BANK\"",
                            Status = 1,
                            StatusName = "Нормальний",
                            Telephone = "0445810700",
                            Type = 0
                        },
                        new
                        {
                            GLMFO = 305299,
                            Address = "вул. Грушевського, 1Д",
                            CodeEDRPOU = "14360570",
                            DateStatus = new DateTime(2016, 12, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "акціонерне товариство комерційний банк \"ПриватБанк\"",
                            GrantLicenseDate = new DateTime(2011, 10, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupSpecial = "SV",
                            GroupSpecialDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IDNBU = "305299",
                            KU = 26,
                            LicenseDate = new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            LicenseNumber = 22,
                            LicenseStatus = 1,
                            LicenseStatusDescription = "чинна банківська ліцензія",
                            NKB = "046",
                            NOBL = "м.Київ",
                            NOBLUR = "м.Київ",
                            NP = "Київ",
                            NameEnglish = "Joint-Stock Company Commercial Bank \"PrivatBank\"",
                            OBLUR = 26,
                            OpenDate = new DateTime(1992, 3, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostalIndex = "01001",
                            ShortName = "АТ КБ \"ПриватБанк\"",
                            ShortNameEnglish = "JSC CB \"PrivatBank\"",
                            Status = 1,
                            StatusName = "Нормальний",
                            TNP = "м.",
                            Type = 0
                        },
                        new
                        {
                            GLMFO = 322001,
                            Address = "вул. Автозаводська,54/19",
                            CodeEDRPOU = "21133352",
                            FullName = "АКЦІОНЕРНЕ ТОВАРИСТВО \"УНІВЕРСАЛ БАНК\"",
                            GrantLicenseDate = new DateTime(2011, 10, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupSpecial = "SV",
                            GroupSpecialDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IDNBU = "322001",
                            KU = 26,
                            LicenseDate = new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            LicenseNumber = 92,
                            LicenseStatus = 1,
                            LicenseStatusDescription = "чинна банківська ліцензія",
                            NKB = "242",
                            NOBL = "м.Київ",
                            NOBLUR = "м.Київ",
                            NP = "Київ",
                            NameEnglish = "JOINT STOCK COMPANY \"UNIVERSAL BANK\"",
                            OBLUR = 26,
                            OpenDate = new DateTime(1994, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostalIndex = "04082",
                            ShortName = "АТ \"УНІВЕРСАЛ БАНК\"",
                            ShortNameEnglish = "JSC \"UNIVERSAL BANK\"",
                            Status = 1,
                            StatusName = "Нормальний",
                            TNP = "м.",
                            Type = 0
                        },
                        new
                        {
                            GLMFO = 300335,
                            Address = "вулиця Генерала Алмазова, буд. 4а",
                            CodeEDRPOU = "14305909",
                            FullName = "Акціонерне товариство \"Райффайзен Банк\"",
                            GrantLicenseDate = new DateTime(2021, 7, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupSpecial = "SV",
                            GroupSpecialDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IDNBU = "300335",
                            KU = 26,
                            LicenseDate = new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            LicenseNumber = 10,
                            LicenseStatus = 1,
                            LicenseStatusDescription = "чинна банківська ліцензія",
                            NKB = "036",
                            NOBL = "м.Київ",
                            NOBLUR = "м.Київ",
                            NP = "Київ",
                            NameEnglish = "Raiffeisen Bank Joint Stock Company",
                            OBLUR = 26,
                            OpenDate = new DateTime(1992, 3, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostalIndex = "01011",
                            ShortName = "АТ \"Райффайзен Банк\"",
                            ShortNameEnglish = "Raiffeisen Bank JSC",
                            Status = 1,
                            StatusName = "Нормальний",
                            TNP = "м.",
                            Type = 0
                        });
                });

            modelBuilder.Entity("YFS.Core.Models.BankSyncHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BankSyncHistories");
                });

            modelBuilder.Entity("YFS.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("RootId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = -1,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 1,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 2,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 3,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 4,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 5,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 6,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 8,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 9,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 10,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 11,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 12,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 13,
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 14,
                            Note = "",
                            RootId = 13
                        },
                        new
                        {
                            Id = 15,
                            Note = "",
                            RootId = 13
                        },
                        new
                        {
                            Id = 16,
                            Note = "",
                            RootId = 13
                        });
                });

            modelBuilder.Entity("YFS.Core.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_en")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_ru")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_ua")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("YFS.Core.Models.MccCategoryMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("MccCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MccCode", "CategoryId", "Description")
                        .IsUnique();

                    b.ToTable("MccCategoryMappings");
                });

            modelBuilder.Entity("YFS.Core.Models.MerchantCategoryCode", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("Mccs");
                });

            modelBuilder.Entity("YFS.Core.Models.MonoIntegration.MonoSyncTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MonobankTransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OperationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SyncedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OperationId")
                        .IsUnique();

                    b.HasIndex("MonobankTransactionId", "OperationId")
                        .IsUnique();

                    b.ToTable("MonoSyncTransaction");
                });

            modelBuilder.Entity("YFS.Core.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CashbackAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("MCC")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("OperationCurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalCurrencyAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("TransferOperationId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeOperation")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("OperationCurrencyId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("YFS.Core.Models.OperationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CurrencyAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("OperationAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("OperationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationItem");
                });

            modelBuilder.Entity("YFS.Core.Models.OperationTag", b =>
                {
                    b.Property<int>("OperationId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("OperationId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("OperationTags");
                });

            modelBuilder.Entity("YFS.Core.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("YFS.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YFS.Core.Models.Account", b =>
                {
                    b.HasOne("YFS.Core.Models.AccountGroup", null)
                        .WithMany("Accounts")
                        .HasForeignKey("AccountGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("Bank_GLMFO")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YFS.Core.Models.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("Bank");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountBalance", b =>
                {
                    b.HasOne("YFS.Core.Models.Account", null)
                        .WithOne("AccountBalance")
                        .HasForeignKey("YFS.Core.Models.AccountBalance", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YFS.Core.Models.AccountGroup", b =>
                {
                    b.HasOne("YFS.Core.Models.User", "User")
                        .WithMany("AccountsGroup")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountGroupTranslation", b =>
                {
                    b.HasOne("YFS.Core.Models.AccountGroup", "AccountGroup")
                        .WithMany("Translations")
                        .HasForeignKey("AccountGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountGroup");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountMonthlyBalance", b =>
                {
                    b.HasOne("YFS.Core.Models.Account", null)
                        .WithMany("AccountsMonthlyBalance")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YFS.Core.Models.AccountTypeTranslation", b =>
                {
                    b.HasOne("YFS.Core.Models.AccountType", "AccountType")
                        .WithMany("Translations")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("YFS.Core.Models.ApiToken", b =>
                {
                    b.HasOne("YFS.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YFS.Core.Models.Category", b =>
                {
                    b.OwnsMany("YFS.Core.Models.CategoryTranslation", "Translations", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("CategoryId")
                                .HasColumnType("integer");

                            b1.Property<string>("LanguageCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("VARCHAR");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("VARCHAR");

                            b1.HasKey("Id");

                            b1.HasIndex("CategoryId");

                            b1.ToTable("CategoryTranslations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    CategoryId = -2,
                                    LanguageCode = "ua",
                                    Name = "Корегування балансу рахунка"
                                },
                                new
                                {
                                    Id = 2,
                                    CategoryId = -2,
                                    LanguageCode = "en",
                                    Name = "Account Balance adjustment"
                                },
                                new
                                {
                                    Id = 3,
                                    CategoryId = -2,
                                    LanguageCode = "ru",
                                    Name = "Корректировка баланса счета"
                                },
                                new
                                {
                                    Id = 4,
                                    CategoryId = -1,
                                    LanguageCode = "ua",
                                    Name = "Переказ"
                                },
                                new
                                {
                                    Id = 5,
                                    CategoryId = -1,
                                    LanguageCode = "en",
                                    Name = "Money Transfer"
                                },
                                new
                                {
                                    Id = 6,
                                    CategoryId = -1,
                                    LanguageCode = "ru",
                                    Name = "Перевод"
                                },
                                new
                                {
                                    Id = 7,
                                    CategoryId = 1,
                                    LanguageCode = "ua",
                                    Name = "Халтура"
                                },
                                new
                                {
                                    Id = 8,
                                    CategoryId = 1,
                                    LanguageCode = "en",
                                    Name = "Wages"
                                },
                                new
                                {
                                    Id = 9,
                                    CategoryId = 1,
                                    LanguageCode = "ru",
                                    Name = "Халтура"
                                },
                                new
                                {
                                    Id = 10,
                                    CategoryId = 2,
                                    LanguageCode = "ua",
                                    Name = "Зарплата"
                                },
                                new
                                {
                                    Id = 11,
                                    CategoryId = 2,
                                    LanguageCode = "en",
                                    Name = "Salary"
                                },
                                new
                                {
                                    Id = 12,
                                    CategoryId = 2,
                                    LanguageCode = "ru",
                                    Name = "Зарплата"
                                },
                                new
                                {
                                    Id = 13,
                                    CategoryId = 3,
                                    LanguageCode = "ua",
                                    Name = "Відпочинок"
                                },
                                new
                                {
                                    Id = 14,
                                    CategoryId = 3,
                                    LanguageCode = "en",
                                    Name = "Vacation"
                                },
                                new
                                {
                                    Id = 15,
                                    CategoryId = 3,
                                    LanguageCode = "ru",
                                    Name = "Отдых"
                                },
                                new
                                {
                                    Id = 16,
                                    CategoryId = 4,
                                    LanguageCode = "ua",
                                    Name = "Борги"
                                },
                                new
                                {
                                    Id = 17,
                                    CategoryId = 4,
                                    LanguageCode = "en",
                                    Name = "Loans"
                                },
                                new
                                {
                                    Id = 18,
                                    CategoryId = 4,
                                    LanguageCode = "ru",
                                    Name = "Долги"
                                },
                                new
                                {
                                    Id = 19,
                                    CategoryId = 5,
                                    LanguageCode = "ua",
                                    Name = "Продукти харчування"
                                },
                                new
                                {
                                    Id = 20,
                                    CategoryId = 5,
                                    LanguageCode = "en",
                                    Name = "Food"
                                },
                                new
                                {
                                    Id = 21,
                                    CategoryId = 5,
                                    LanguageCode = "ru",
                                    Name = "Продукти питания"
                                },
                                new
                                {
                                    Id = 22,
                                    CategoryId = 6,
                                    LanguageCode = "ua",
                                    Name = "Медичні витрати"
                                },
                                new
                                {
                                    Id = 23,
                                    CategoryId = 6,
                                    LanguageCode = "en",
                                    Name = "Healthcare"
                                },
                                new
                                {
                                    Id = 24,
                                    CategoryId = 6,
                                    LanguageCode = "ru",
                                    Name = "Медицинские расходы"
                                },
                                new
                                {
                                    Id = 25,
                                    CategoryId = 8,
                                    LanguageCode = "ua",
                                    Name = "Освіта"
                                },
                                new
                                {
                                    Id = 26,
                                    CategoryId = 8,
                                    LanguageCode = "en",
                                    Name = "Education"
                                },
                                new
                                {
                                    Id = 27,
                                    CategoryId = 8,
                                    LanguageCode = "ru",
                                    Name = "Образование"
                                },
                                new
                                {
                                    Id = 28,
                                    CategoryId = 9,
                                    LanguageCode = "ua",
                                    Name = "Інші прибутки"
                                },
                                new
                                {
                                    Id = 29,
                                    CategoryId = 9,
                                    LanguageCode = "en",
                                    Name = "Other Income"
                                },
                                new
                                {
                                    Id = 30,
                                    CategoryId = 9,
                                    LanguageCode = "ru",
                                    Name = "Другие доходы"
                                },
                                new
                                {
                                    Id = 31,
                                    CategoryId = 10,
                                    LanguageCode = "ua",
                                    Name = "Комунальні платежі"
                                },
                                new
                                {
                                    Id = 32,
                                    CategoryId = 10,
                                    LanguageCode = "en",
                                    Name = "Communal payments"
                                },
                                new
                                {
                                    Id = 33,
                                    CategoryId = 10,
                                    LanguageCode = "ru",
                                    Name = "Коммунальные платежи"
                                },
                                new
                                {
                                    Id = 34,
                                    CategoryId = 11,
                                    LanguageCode = "ua",
                                    Name = "Одяг"
                                },
                                new
                                {
                                    Id = 35,
                                    CategoryId = 11,
                                    LanguageCode = "en",
                                    Name = "Clothing"
                                },
                                new
                                {
                                    Id = 36,
                                    CategoryId = 11,
                                    LanguageCode = "ru",
                                    Name = "Одежда"
                                },
                                new
                                {
                                    Id = 37,
                                    CategoryId = 12,
                                    LanguageCode = "ua",
                                    Name = "Особиста гігієна"
                                },
                                new
                                {
                                    Id = 38,
                                    CategoryId = 12,
                                    LanguageCode = "en",
                                    Name = "Personal Care"
                                },
                                new
                                {
                                    Id = 39,
                                    CategoryId = 12,
                                    LanguageCode = "ru",
                                    Name = "Личная гигиена"
                                },
                                new
                                {
                                    Id = 40,
                                    CategoryId = 13,
                                    LanguageCode = "ua",
                                    Name = "Побутові видатки"
                                },
                                new
                                {
                                    Id = 41,
                                    CategoryId = 13,
                                    LanguageCode = "en",
                                    Name = "Household"
                                },
                                new
                                {
                                    Id = 42,
                                    CategoryId = 13,
                                    LanguageCode = "ru",
                                    Name = "Хозяйственные расходы"
                                },
                                new
                                {
                                    Id = 43,
                                    CategoryId = 14,
                                    LanguageCode = "ua",
                                    Name = "Покращення"
                                },
                                new
                                {
                                    Id = 44,
                                    CategoryId = 14,
                                    LanguageCode = "en",
                                    Name = "Improvements"
                                },
                                new
                                {
                                    Id = 45,
                                    CategoryId = 14,
                                    LanguageCode = "ru",
                                    Name = "Улучшения"
                                },
                                new
                                {
                                    Id = 46,
                                    CategoryId = 15,
                                    LanguageCode = "ua",
                                    Name = "Меблі"
                                },
                                new
                                {
                                    Id = 47,
                                    CategoryId = 15,
                                    LanguageCode = "en",
                                    Name = "Furnishings"
                                },
                                new
                                {
                                    Id = 48,
                                    CategoryId = 15,
                                    LanguageCode = "ru",
                                    Name = "Мебель"
                                },
                                new
                                {
                                    Id = 49,
                                    CategoryId = 16,
                                    LanguageCode = "ua",
                                    Name = "Електроніка"
                                },
                                new
                                {
                                    Id = 50,
                                    CategoryId = 16,
                                    LanguageCode = "en",
                                    Name = "Electronics"
                                },
                                new
                                {
                                    Id = 51,
                                    CategoryId = 16,
                                    LanguageCode = "ru",
                                    Name = "Електроника"
                                });
                        });

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("YFS.Core.Models.MonoIntegration.MonoSyncTransaction", b =>
                {
                    b.HasOne("YFS.Core.Models.Operation", "Operation")
                        .WithOne("MonoSyncTransaction")
                        .HasForeignKey("YFS.Core.Models.MonoIntegration.MonoSyncTransaction", "OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("YFS.Core.Models.Operation", b =>
                {
                    b.HasOne("YFS.Core.Models.Account", "Account")
                        .WithMany("Operations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.Currency", "OperationCurrency")
                        .WithMany()
                        .HasForeignKey("OperationCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("OperationCurrency");
                });

            modelBuilder.Entity("YFS.Core.Models.OperationItem", b =>
                {
                    b.HasOne("YFS.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.Operation", null)
                        .WithMany("OperationItems")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("YFS.Core.Models.OperationTag", b =>
                {
                    b.HasOne("YFS.Core.Models.Operation", "Operation")
                        .WithMany("OperationTags")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.Tag", "Tag")
                        .WithMany("OperationTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("YFS.Core.Models.Account", b =>
                {
                    b.Navigation("AccountBalance")
                        .IsRequired();

                    b.Navigation("AccountsMonthlyBalance");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountGroup", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("YFS.Core.Models.Bank", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.Currency", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.Operation", b =>
                {
                    b.Navigation("MonoSyncTransaction")
                        .IsRequired();

                    b.Navigation("OperationItems");

                    b.Navigation("OperationTags");
                });

            modelBuilder.Entity("YFS.Core.Models.Tag", b =>
                {
                    b.Navigation("OperationTags");
                });

            modelBuilder.Entity("YFS.Core.Models.User", b =>
                {
                    b.Navigation("AccountsGroup");
                });
#pragma warning restore 612, 618
        }
    }
}
