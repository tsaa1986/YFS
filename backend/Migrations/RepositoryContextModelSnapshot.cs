// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YFS.Repo.Data;

#nullable disable

namespace YFS.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YFS.Core.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AccountId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("BankId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<int>("Favorites")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("IBAN")
                        .HasMaxLength(40)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountGroupId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("BankId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValueSql("0.0");

                    b.Property<DateTime>("LastUpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountsBalance");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountGroup", b =>
                {
                    b.Property<int>("AccountGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountGroupId"));

                    b.Property<string>("AccountGroupNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("AccountGroupNameRu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("AccountGroupNameUa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("GroupOrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountGroupId");

                    b.HasIndex("UserId", "AccountGroupNameEn")
                        .IsUnique();

                    b.HasIndex("UserId", "AccountGroupNameRu")
                        .IsUnique();

                    b.HasIndex("UserId", "AccountGroupNameUa")
                        .IsUnique();

                    b.ToTable("AccountGroups");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountMonthlyBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ClosingMonthBalance")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("MonthCredit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("MonthDebit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("MonthNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("OpeningMonthBalance")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("StartDateOfMonth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("YearNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountsMonthlyBalance");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountTypeId"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("NameUa")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("NoteEn")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("NoteRu")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("NoteUa")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("TypeOrederBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            AccountTypeId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameEn = "Cash",
                            NameRu = "Наличные деньги",
                            NameUa = "Готівкові гроші",
                            NoteRu = "Учет наличных средств",
                            TypeOrederBy = 0
                        },
                        new
                        {
                            AccountTypeId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameEn = "Internet-money",
                            NameRu = "Интернет-деньги",
                            NameUa = "Інтернет-гроші",
                            NoteRu = "Интернет счета",
                            TypeOrederBy = 0
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameEn = "Deposit",
                            NameRu = "Депозит",
                            NameUa = "Депозит",
                            NoteRu = "Учет реальных депозитов",
                            TypeOrederBy = 0
                        },
                        new
                        {
                            AccountTypeId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameEn = "Bank account",
                            NameRu = "Банковский счет",
                            NameUa = "Банківський рахунок",
                            NoteRu = "Банковский счет",
                            TypeOrederBy = 0
                        });
                });

            modelBuilder.Entity("YFS.Core.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("BankId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Demo Bank"
                        });
                });

            modelBuilder.Entity("YFS.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CategoryId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name_ENG")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_RU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_UA")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("RootId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            Name_ENG = "Account Balance adjustment",
                            Name_RU = "Корректировка баланса счета",
                            Name_UA = "Корегування балансу рахунка",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = -1,
                            Name_ENG = "Money Transfer",
                            Name_RU = "Перевод",
                            Name_UA = "Переказ",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 1,
                            Name_ENG = "Wages",
                            Name_RU = "Халтура",
                            Name_UA = "Халтура",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 2,
                            Name_ENG = "Salary",
                            Name_RU = "Зарплата",
                            Name_UA = "Зарплата",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 3,
                            Name_ENG = "Vacation",
                            Name_RU = "Отдых",
                            Name_UA = "Відпочинок",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 4,
                            Name_ENG = "Loans",
                            Name_RU = "Долги",
                            Name_UA = "Борги",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 5,
                            Name_ENG = "Food",
                            Name_RU = "Продукти питания",
                            Name_UA = "Продукти харчування",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 6,
                            Name_ENG = "Healthcare",
                            Name_RU = "Медицинские расходы",
                            Name_UA = "Медичні витрати",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 8,
                            Name_ENG = "Education",
                            Name_RU = "Образование",
                            Name_UA = "Освіта",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 9,
                            Name_ENG = "Other Income",
                            Name_RU = "Другие доходы",
                            Name_UA = "Інші прибутки",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 10,
                            Name_ENG = "Communal payments",
                            Name_RU = "Коммунальные платежи",
                            Name_UA = "Комунальні платежі",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 11,
                            Name_ENG = "Clothing",
                            Name_RU = "Одежда",
                            Name_UA = "Одяг",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 12,
                            Name_ENG = "Personal Care",
                            Name_RU = "Личная гигиена",
                            Name_UA = "Особиста гігієна",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 13,
                            Name_ENG = "Household",
                            Name_RU = "Хозяйственные расходы",
                            Name_UA = "Побутові видатки",
                            Note = "",
                            RootId = 0
                        },
                        new
                        {
                            Id = 14,
                            Name_ENG = "Improvements",
                            Name_RU = "Улучшения",
                            Name_UA = "Покращення",
                            Note = "",
                            RootId = 13
                        },
                        new
                        {
                            Id = 15,
                            Name_ENG = "Furnishings",
                            Name_RU = "Мебель",
                            Name_UA = "Меблі",
                            Note = "",
                            RootId = 13
                        },
                        new
                        {
                            Id = 16,
                            Name_ENG = "Electronics",
                            Name_RU = "Електроника",
                            Name_UA = "Електроніка",
                            Note = "",
                            RootId = 13
                        });
                });

            modelBuilder.Entity("YFS.Core.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name_en")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_ru")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name_ua")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ShortNameUs")
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            CurrencyId = 36,
                            Name_en = "Australian dollar",
                            Name_ru = "Австралийский доллар",
                            Name_ua = "Австралійський Долар",
                            ShortNameUs = "AUD"
                        },
                        new
                        {
                            CurrencyId = 980,
                            Name_en = "Hryvnia",
                            Name_ru = "Гривня",
                            Name_ua = "Гривня",
                            ShortNameUs = "UAH"
                        },
                        new
                        {
                            CurrencyId = 840,
                            Name_en = "US Dollar",
                            Name_ru = "Доллар США",
                            Name_ua = "Долар США",
                            ShortNameUs = "USD"
                        },
                        new
                        {
                            CurrencyId = 978,
                            Name_en = "Euro",
                            Name_ru = "Евро",
                            Name_ua = "Євро",
                            ShortNameUs = "EUR"
                        });
                });

            modelBuilder.Entity("YFS.Core.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CashbackAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CurrencyAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("MCC")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("OperationAmount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("OperationCurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("TransferOperationId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeOperation")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("YFS.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("YFS.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YFS.Core.Models.Account", b =>
                {
                    b.HasOne("YFS.Core.Models.AccountGroup", null)
                        .WithMany("Accounts")
                        .HasForeignKey("AccountGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.AccountType", null)
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountBalance", b =>
                {
                    b.HasOne("YFS.Core.Models.Account", null)
                        .WithOne("AccountBalance")
                        .HasForeignKey("YFS.Core.Models.AccountBalance", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YFS.Core.Models.AccountGroup", b =>
                {
                    b.HasOne("YFS.Core.Models.User", "User")
                        .WithMany("AccountsGroup")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountMonthlyBalance", b =>
                {
                    b.HasOne("YFS.Core.Models.Account", null)
                        .WithMany("AccountsMonthlyBalance")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YFS.Core.Models.Operation", b =>
                {
                    b.HasOne("YFS.Core.Models.Account", "Account")
                        .WithMany("Operations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YFS.Core.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("YFS.Core.Models.Account", b =>
                {
                    b.Navigation("AccountBalance")
                        .IsRequired();

                    b.Navigation("AccountsMonthlyBalance");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountGroup", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.Bank", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.Currency", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("YFS.Core.Models.User", b =>
                {
                    b.Navigation("AccountsGroup");
                });
#pragma warning restore 612, 618
        }
    }
}
