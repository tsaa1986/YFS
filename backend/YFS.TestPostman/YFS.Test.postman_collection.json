{
	"info": {
		"_postman_id": "a3c9e443-48cb-40f7-ac1e-26a848cc9691",
		"name": "YFS.Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26263243"
	},
	"item": [
		{
			"name": "Currency",
			"item": [
				{
					"name": "ReturnCurrenciesList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"pm.test('Number of Currencies = ' + jsonData.length, function () {\r",
									"    pm.expect(jsonData.length).to.be.above(0);\r",
									"})\r",
									"pm.test(\"Currency UAH is exist\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"UAH\");}\r",
									"    );\r",
									"pm.test(\"Currency USD is exist\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"USD\");}\r",
									"    );\r",
									"pm.test(\"Currency EUR is exist\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"EUR\");}\r",
									"    );\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/Currency",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Currency"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "ReturnCategoriesLIst",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"pm.test('Number of Categories = ' + jsonData.length, function () {\r",
									"    pm.expect(jsonData.length).to.be.above(0);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify JSON Array of Objects\", function () {\r",
									"pm.expect(jsonData).to.be.an(\"array\");\r",
									"jsonData.forEach(function (obj) {\r",
									"        pm.expect(obj).to.have.property(\"id\");\r",
									"    });\r",
									"})\r",
									"\r",
									"pm.test(\"Verify Exist categories: Account Balance adjustment\" , function() {\r",
									"    var accountBalanceAdjustmentCategory = jsonData.find(function(obj) {\r",
									"        return obj.id === -2;\r",
									"    });\r",
									"\r",
									"    pm.expect(accountBalanceAdjustmentCategory, \"Account Balance adjustment category not found\").to.exist;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/Category",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Category"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AccountGroups",
			"item": [
				{
					"name": "ReturnAccountGroupsForDemoUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Number of AccountGruops For DemoUser = ' + jsonData.length, function () {\r",
									"    pm.expect(jsonData.length).to.equal(3);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/AccountGroups",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"AccountGroups"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateAccountGroups1ForDemoUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"AccountGroupsId1DemoUser\", jsonData.accountGroupId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accountGroupNameRu\": \"DemoGroup1Ru\",\r\n  \"accountGroupNameEn\": \"DemoGroup1En\",\r\n  \"accountGroupNameUa\": \"DemoGroup1Ua\",\r\n  \"groupOrderBy\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/AccountGroups",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"AccountGroups"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateAccountGroups2ForDemoUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"pm.environment.set(\"AccountGroupsId2DemoUser\", jsonData.accountGroupId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accountGroupNameRu\": \"DemoGroup2Ru\",\r\n  \"accountGroupNameEn\": \"DemoGroup2En\",\r\n  \"accountGroupNameUa\": \"DemoGroup2Ua\",\r\n  \"groupOrderBy\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/AccountGroups",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"AccountGroups"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateAccountGroups1ForDemoUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accountGroupId\":{{AccountGroupsId1DemoUser}},\r\n  \"accountGroupNameRu\": \"DemoGroup1RuUpdated\",\r\n  \"accountGroupNameEn\": \"DemoGroup1EnUpdated\",\r\n  \"accountGroupNameUa\": \"DemoGroup1UaUpdated\",\r\n  \"groupOrderBy\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/AccountGroups",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"AccountGroups"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateAccountGroups2ForDemoUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accountGroupId\":{{AccountGroupsId2DemoUser}},\r\n  \"accountGroupNameRu\": \"DemoGroup2RuUpdated\",\r\n  \"accountGroupNameEn\": \"DemoGroup2EnUpdated\",\r\n  \"accountGroupNameUa\": \"DemoGroup2UaUpdated\",\r\n  \"groupOrderBy\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/AccountGroups",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"AccountGroups"
							]
						}
					},
					"response": []
				},
				{
					"name": "ReturnAccountGroupsCheckExistNewGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Number of AccountGruops For DemoUser = ' + jsonData.length, function () {\r",
									"    pm.expect(jsonData.length).to.be.above(3);\r",
									"})\r",
									"pm.test(\"DemoGroup1En is exist\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"DemoGroup1En\");\r",
									"});\r",
									"pm.test(\"DemoGroup2En is exist\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"DemoGroup2En\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/AccountGroups",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"AccountGroups"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Accounts",
			"item": [
				{
					"name": "ReturnOpenAccountsByDemoUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Number of Accounts For DemoUser = ' + jsonData.length, function () {\r",
									"    pm.expect(jsonData.length).to.be.above(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BaseUrl}}/api/Accounts/openAccountsByUserId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Accounts",
								"openAccountsByUserId"
							]
						}
					},
					"response": []
				},
				{
					"name": "ReturnAccountsByGroupIdForDemoUser",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "CreateAccount",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"accountStatus\": 1,\r\n  \"favorites\": 1,\r\n  \"accountGroupId\": 1,\r\n  \"accountTypeId\": 1,\r\n  \"currencyId\": 980,\r\n  \"bankId\": 1,\r\n  \"name\": \"wallet-test cash\",\r\n  \"openingDate\": \"2023-07-07T06:07:50.136Z\",\r\n  \"note\": \"note test\",\r\n  \"balance\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/Accounts/openAccountsByUserId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Accounts",
								"openAccountsByUserId"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateAccount For DemoUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Account is updated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"wallet-test updated\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"accountStatus\": 0,\r\n  \"favorites\": 0,\r\n  \"accountGroupId\": 1,\r\n  \"accountTypeId\": 1,\r\n  \"currencyId\": 980,\r\n  \"bankId\": 1,\r\n  \"name\": \"wallet-test updated\",\r\n  \"openingDate\": \"2023-07-07T06:16:16.778Z\",\r\n  \"note\": \"note upddated\",\r\n  \"balance\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/Accounts",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Accounts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "ReturnDemoUserInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"UserId\", jsonData.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"pm.test(\"Demo user is exist\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Demo\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/Authentication/me",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Authentication",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "ReturnJwtTokenLoginDemUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"JwtToken\", jsonData.token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"demo\",\r\n  \"password\": \"123$qweR\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/Authentication/sign-in",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Authentication",
								"sign-in"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Operations",
			"item": [
				{
					"name": "CreataOperationIncome-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"CreateOperationIncome-01\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].balance).to.eql(100000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"transferOperationId\": 0,\r\n  \"categoryId\": 2,\r\n  \"typeOperation\": 2,\r\n  \"accountId\": 6,\r\n  \"operationCurrencyId\": 0,\r\n  \"currencyAmount\": 980,\r\n  \"operationAmount\": 100000,\r\n  \"operationDate\": \"2023-07-07T09:34:59.780Z\",\r\n  \"description\": \"test add operation income\",\r\n  \"tag\": \"tag operation\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/Operations/0",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Operations",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreataOperationIncome-02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"CreateOperationIncome-01\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].balance).to.eql(100000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"transferOperationId\": 0,\r\n  \"categoryId\": 2,\r\n  \"typeOperation\": 2,\r\n  \"accountId\": 6,\r\n  \"operationCurrencyId\": 0,\r\n  \"currencyAmount\": 980,\r\n  \"operationAmount\": 100000,\r\n  \"operationDate\": \"2023-07-07T09:34:59.780Z\",\r\n  \"description\": \"test add operation income\",\r\n  \"tag\": \"tag operation\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/Operations/0",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Operations",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreataOperationIncome-03",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"CreateOperationExpenses\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].balance).to.eql(300000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"transferOperationId\": 0,\r\n  \"categoryId\": 2,\r\n  \"typeOperation\": 2,\r\n  \"accountId\": 6,\r\n  \"operationCurrencyId\": 0,\r\n  \"currencyAmount\": 980,\r\n  \"operationAmount\": 100000,\r\n  \"operationDate\": \"2023-05-07T09:34:59.780Z\",\r\n  \"description\": \"test add operation income1\",\r\n  \"tag\": \"tag operation\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/Operations/0",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Operations",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreataOperationExpenses-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"CreateOperationIncome-01\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].balance).to.eql(250000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"transferOperationId\": 0,\r\n  \"categoryId\": 2,\r\n  \"typeOperation\": 1,\r\n  \"accountId\": 6,\r\n  \"operationCurrencyId\": 0,\r\n  \"currencyAmount\": 980,\r\n  \"operationAmount\": 50000,\r\n  \"operationDate\": \"2023-07-07T09:34:59.780Z\",\r\n  \"description\": \"test add operation expenses1\",\r\n  \"tag\": \"tag operation\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/Operations/0",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Operations",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreataOperationExpenses-02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"CreateOperationIncome-01\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].balance).to.eql(200000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"transferOperationId\": 0,\r\n  \"categoryId\": 2,\r\n  \"typeOperation\": 1,\r\n  \"accountId\": 6,\r\n  \"operationCurrencyId\": 0,\r\n  \"currencyAmount\": 980,\r\n  \"operationAmount\": 50000,\r\n  \"operationDate\": \"2023-06-07T09:34:59.780Z\",\r\n  \"description\": \"test add operation expenses2\",\r\n  \"tag\": \"tag operation expenses2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/Operations/0",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Operations",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreataOperationExpenses-03",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"CreateOperationIncome-01\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].balance).to.eql(150000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"transferOperationId\": 0,\r\n  \"categoryId\": 2,\r\n  \"typeOperation\": 1,\r\n  \"accountId\": 6,\r\n  \"operationCurrencyId\": 0,\r\n  \"currencyAmount\": 980,\r\n  \"operationAmount\": 50000,\r\n  \"operationDate\": \"2023-05-07T09:34:59.780Z\",\r\n  \"description\": \"test add operation expenses3\",\r\n  \"tag\": \"tag operation expenses3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/Operations/0",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"Operations",
								"0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ReturnAccountTypes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"pm.test('Number of AccountTypes = ' + jsonData.length, function () {\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/api/AccountTypes",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"api",
						"AccountTypes"
					]
				}
			},
			"response": []
		}
	]
}